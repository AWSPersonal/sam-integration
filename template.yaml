AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - SNS to Lambda

Resources:
  AQSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AQSNSTopic
      DisplayName: AQ's SNS Topic
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt SNSDispatchFunction.Arn    
  SNSDispatchFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SNSDispatchFunction
      Principal: sns.amazonaws.com
  SNSDispatcherRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SNS-Dispatcher-Role
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: StartExecution
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'states:StartExecution'
            - 'logs:CreateLogGroup'
            - 'logs:PutLogEvents'
            - 'lambda:InvokeFunction'
            Resource: '*'
  HandlerInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - lambda:InvokeFunction
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: '*'
  DispatcherStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - lambda:InvokeFunction
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: '*'
  SNSDispatchFunction:
    Type: AWS::Serverless::Function
    DependsOn: DispatcherStateMachine
    Properties:
      FunctionName: SNS-Dispatcher-Handler
      CodeUri: triggers/sns_dispatch_handler
      Handler: main.handler
      Runtime: python3.9
      Timeout: 3
      MemorySize: 1024
      Role: !GetAtt SNSDispatcherRole.Arn
      Policies:
        StepFunctionsExecutionPolicy:
          StateMachineName: !GetAtt DispatcherStateMachine.Name
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt DispatcherStateMachine.Arn
  MongoHandler:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: Mongo-Handler
      CodeUri: triggers/mongo_handler
      Handler: main.handler
      Runtime: python3.9
      Timeout: 3
      MemorySize: 1024
      Role: !GetAtt HandlerInvokeRole.Arn
  DynamoHandler:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: Dynamo-Handler
      CodeUri: triggers/dynamo_handler
      Handler: main.handler
      Runtime: python3.9
      Timeout: 3
      MemorySize: 1024
  DispatcherStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: Dispatcher-State-Machine
      Type: STANDARD
      Role: !GetAtt DispatcherStateMachineRole.Arn
      DefinitionUri: triggers/state-machine/dispatcher.asl.json
      DefinitionSubstitutions:
        MongoHandlerArn: !GetAtt MongoHandler.Arn
        DynamoHandlerArn: !GetAtt DynamoHandler.Arn

Outputs:
  HelloWorldFunctionOutput:
    Description: SNSDispatchFunction function name
    Value: !Ref SNSDispatchFunction
  
  SNStopicName:
    Description: SNS topic name
    Value: !GetAtt AQSNSTopic.TopicName

  SNStopicARN:
    Description: SNS topic ARN
    Value: !Ref AQSNSTopic